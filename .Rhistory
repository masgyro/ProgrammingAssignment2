setwd("C:/Users/Cary/ProgrammingAssignment2")
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector (1:3)
makeVector()
cachemean
?numeric()
makeVector(c(2:4))
x<-c(1:4)
x
makeVector(x)
x
x<-as.numeric(c(1:4))
x
makeVector(x)
a<-makeVector(c(1:4))
a
a$get
a$get()
a$getmean()
cachemean(a)
getmean(a)
a$getmean()
cachemean(a)
x
x(matrix,2)
matrix(x,2)
solve(x)
x
x<-matrix(
x,2)
x
solve(x)
remove(cachemean)
remove(makeVector)
a$getmean()
cachemean(a)
a$get()
?mean
cachemean <- function(x, ...) {
m <- solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cachemean(x)
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setmean = setinverse,
getmean = getinverse)
}
b<-makeVector(c(3,4,5,6))
b
b$get()
b$getInverse()
b$getinverse()
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b<-makeVector(c(10,20,30,40))
b
b$get()
b$getinverse()
cacheinverse(b)
cacheinverse <- function(x, ...) {
m <- solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheinverse(b)
cacheinverse <- function(x, ...) {
m <- solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cacheinverse(b)
b$getinverse()
cacheinverse(b)
?solve()
cacheinverse <- function(x) {
m <- solve(x)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
m
}
cachemean(b)
typeof(b)
class(b)
names(obj)
names(b)
names(a)
attributes(b)
head(b,1)
str(b)
class(b)
b
names(b)
b$set
b$get
cacheinverse <- function(x, ...) {
m <- solve(x$get)
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cachemean(b)
?matrix
is.matrix(b)
is.matrix(a
)
length()
length(b$get)
length(b$get,)
b$get()
length(b$get())
matrix(b$get())
matrix(b$get,nrow=2)
matrix(b$get(),nrow=2)
matrix(b$get(),nrow=(length(b$get())/2))
cacheinverse <- function(x, ...) {
m <- solve(matrix(b$get(),nrow=(length(b$get())/2))
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
cacheinverse <- function(x, ...) {
m <- solve(matrix(b$get(),nrow=(length(b$get())/2)))
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
b$getmean()
cachemean(b)
b$getinverse()
cacheinverse(b)
sqrt(9)
sqrt(length(b$get()))
cacheinverse <- function(x, ...) {
m <- solve(matrix(b$get(),nrow=(sqrt(length(b$get())))))
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
b$getinverse
b$getinverse()
cacheinverse(b)
a$set(c(10,20,30,40)
)
a$getinverse()
a$getinverse()
b$set(c(30,40,50,60))
b$getinverse()
cacheinverse(b)
cacheinverse(b)
b$get()
b<-makeVector(c(5,25,125,165))
b$get()
cacheinverse(b)
cacheinverse(b)
b<-makeVector(c(15,25,35,45))
b$get()
cacheSolve(b)
## These are a pair of functions that cache the inverse of a matrix
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- solve(matrix(b$get(),nrow=(sqrt(length(b$get())))))
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
b<-makeVector(c(15,25,35,70))
cacheSolve(b)
b<-makeVector(c(15,25,35,75))
b$get()
makeCacheMatrix(b)
b<-makeCacheMatrix(c(10,20,30,40,50,60,70,80,90))
b$get()
makeCacheMatrix(b)
b$get()
makeCacheMatrix(b)
cacheSolve(b)
sqrt(length(b$get()))))
sqrt(length(b$get())))
sqrt(length(b$get()))
b<-makeCacheMatrix(c(10,20,30,40,50,60,70,80,100))
b$get
b$get()
cacheSolve(b)
cacheSolve(b)
b<-makeCacheMatrix(c(1,2,3,4,5,6,7,8,14))
b$get()
makeCacheMatrix(b)
b$get()
makeCacheMatrix(b)
## These are a pair of functions that cache the inverse of a matrix
## makeCacheMatrix: This function creates a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## cacheSolve: This function computes the inverse of the special "matrix" returned by makeCacheMatrix above. If the inverse has already been calculated (and the matrix has not changed), then cacheSolve should retrieve the inverse from the cache.
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- solve(matrix(b$get(),nrow=(sqrt(length(b$get())))))
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
b$get()
cacheSolve(b)
m
remove(b)
b
b<-makeVector((c5,25,125,625))
b<-makeVector(c(5,25,125,625))
solve(matrix(5,25,125,625))
solve(matrix(5,25,125,625),nrow=2)
mat <-matrix((5,25,125,625),nrow=2)
mat <-matrix((5,25,125,625),nrow=2))
temp<-c(5,25,125,625)
mat<-matrix(temp,nrow=2)
solve(mat)
temp<-c(5,25,125,65)
mat<-matrix(temp,nrow=2)
solve(mat)
makeCacheMatrix<-(c(5,25,125,65))
remove makeCacheMatrix
remove (makeCacheMatrix)
b<-makeCacheMatrix (c(5,25,125,65))
b<-makeCacheMatrix(c(5,25,125,65))
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
b<-makeCacheMatrix(c(5,25,125,65))
b$et
b$get
b$get()
cachemean(b)
cacheSolve(b)
cacheSolve(b)
c<-makeCacheMatrix(c(1,2,3,6))
c$get()
c$getinverse()
getinverse(c)
cacheSolve(c)
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(matrix(b$get(),nrow=(sqrt(length(b$get())))))
x$setinverse(m)
m
}
c<-makeCacheMatrix(c(1,2,3,6))
c$get
c$get()
cacheSolve(c)
cacheSolve(c)
c$get()
c
mat<-matrix(c)
mat<-matrix(c,nrow=2
)
solve(mat)
c
temp<-c(5,25,125,65)
mat<-matrix(temp,nrow=2)
mat
solve(mat)
